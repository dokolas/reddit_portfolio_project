[{"/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/index.js":"1","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/App.js":"2","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/reportWebVitals.js":"3","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/pages/Home.js":"4","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/actions/subredditAction.js":"5","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/api.js":"6","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/reducers/index.js":"7","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/reducers/subredditReducer.js":"8","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/components/subredditList.js":"9","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/components/chosenPosts.js":"10","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/actions/chosenPostsAction.js":"11","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/reducers/chosenPostsReducer.js":"12","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/components/posts.js":"13","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/components/Posts.js":"14","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/reducers/commentReducer.js":"15","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/actions/commentAction.js":"16","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/components/Comments.js":"17","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/components/GlobalStyles.js":"18","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/components/Nav.js":"19","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/actions/searchPostsAction.js":"20","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/reducers/searchPostsReducer.js":"21"},{"size":1341,"mtime":1610562500476,"results":"22","hashOfConfig":"23"},{"size":349,"mtime":1610505420434,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1610069509190,"results":"25","hashOfConfig":"23"},{"size":3761,"mtime":1610508772078,"results":"26","hashOfConfig":"23"},{"size":443,"mtime":1610168590611,"results":"27","hashOfConfig":"23"},{"size":451,"mtime":1610507284085,"results":"28","hashOfConfig":"23"},{"size":440,"mtime":1610562489804,"results":"29","hashOfConfig":"23"},{"size":541,"mtime":1610171346271,"results":"30","hashOfConfig":"23"},{"size":787,"mtime":1610508758396,"results":"31","hashOfConfig":"23"},{"size":267,"mtime":1610248419949,"results":"32","hashOfConfig":"23"},{"size":627,"mtime":1610506925825,"results":"33","hashOfConfig":"23"},{"size":555,"mtime":1610509115047,"results":"34","hashOfConfig":"23"},{"size":587,"mtime":1610254829780,"results":"35","hashOfConfig":"23"},{"size":2137,"mtime":1610505725465,"results":"36","hashOfConfig":"23"},{"size":614,"mtime":1610335215422,"results":"37","hashOfConfig":"23"},{"size":416,"mtime":1610335173136,"results":"38","hashOfConfig":"23"},{"size":3737,"mtime":1610505215005,"results":"39","hashOfConfig":"23"},{"size":1035,"mtime":1610331158456,"results":"40","hashOfConfig":"23"},{"size":1784,"mtime":1610562529630,"results":"41","hashOfConfig":"23"},{"size":316,"mtime":1610507448027,"results":"42","hashOfConfig":"23"},{"size":406,"mtime":1610509103795,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"3rhdle",{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"49"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"49"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/index.js",["93"],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/App.js",["94"],"import \"./App.css\";\n//import pages\nimport { Home } from \"./pages/Home\";\nimport React, { useEffect } from \"react\";\nimport Nav from \"./components/Nav\";\nimport GlobalStyles from \"./components/GlobalStyles\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalStyles />\n      <Nav />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n",["95","96"],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/reportWebVitals.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/pages/Home.js",["97","98","99"],"import React, { useEffect } from \"react\";\n//redux\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loadSubreddit } from \"../actions/subredditAction\";\n//components\nimport SubredditList from \"../components/subredditList\";\nimport Posts from \"../components/Posts\";\nimport SpecificPosts from \"../components/chosenPosts\";\nimport Comments from \"../components/Comments\";\n//styles and motion\nimport styled from \"styled-components\";\nimport { motion } from \"framer-motion\";\n\nexport const Home = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadSubreddit());\n  }, [dispatch]);\n\n  //GET THE DATA BACK FROM THE ABOVE FETCH/STATE\n  const { categories, initialposts } = useSelector((state) => state.subreddit);\n  const { chosenPosts } = useSelector((state) => state.chosenPosts);\n  const { commentPosts, mainPost } = useSelector((state) => state.comments);\n  const { searchedPosts } = useSelector((state) => state.searchedPosts);\n\n  return (\n    <MainContainer>\n      <CategoryList>\n        <h3>Popular Subreddits</h3>\n        {categories.map((category) => (\n          <SubredditList\n            category={category.data.display_name_prefixed}\n            key={category.data.id}\n          />\n        ))}\n      </CategoryList>\n      {commentPosts.length ? (\n        <Comments />\n      ) : (\n        \"\" //this line item renders the '' with ? on line 40.  so if the length is 0, render ''\n      )}\n      {chosenPosts.length ? (\n        <PostList>\n          {chosenPosts.map((post) => (\n            <div>\n              <Posts\n                title={post.data.title}\n                ups={post.data.ups}\n                thumb={post.data.thumbnail}\n                key={post.data.id}\n                id={post.data.id}\n                subreddit={post.data.subreddit}\n                author={post.data.author}\n                unixTime={post.data.created}\n              />\n            </div>\n          ))}\n        </PostList>\n      ) : (\n        \"\" //this line item renders the '' with ? on line 40.  so if the length is 0, render ''\n      )}\n      {initialposts.length ? (\n        <PostList>\n          {initialposts.map((post) => (\n            <Posts\n              title={post.data.title}\n              ups={post.data.ups}\n              thumb={post.data.thumbnail}\n              key={post.data.id}\n              id={post.data.id}\n              subreddit={post.data.subreddit}\n              author={post.data.author}\n              unixTime={post.data.created}\n            />\n          ))}\n        </PostList>\n      ) : (\n        \"\" //this line item renders the '' with ? on line 40.  so if the length is 0, render ''\n      )}\n\n      {searchedPosts.length ? (\n        <PostList>\n          {searchedPosts.map((post) => (\n            <Posts\n              title={post.data.title}\n              ups={post.data.ups}\n              thumb={post.data.thumbnail}\n              key={post.data.id}\n              id={post.data.id}\n              subreddit={post.data.subreddit}\n              author={post.data.author}\n              unixTime={post.data.created}\n            />\n          ))}\n        </PostList>\n      ) : (\n        \"\" //this line item renders the '' with ? on line 40.  so if the length is 0, render ''\n      )}\n    </MainContainer>\n  );\n};\nconst MainContainer = styled(motion.div)`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-template-rows: auto;\n  grid-gap: 5px;\n`;\n\nconst PostList = styled(motion.div)`\n  grid-column: 2 / span 3;\n`;\n\nconst CategoryList = styled(motion.div)`\n  grid-column: 1;\n  h3 {\n    margin-left: 0.5rem;\n    padding-left: 0.5rem;\n    border-left: 3px red solid;\n    margin-bottom: 1rem;\n  }\n`;\n\nconst CommentsList = styled(motion.div)`\n  background: black;\n  z-index: 5;\n  position: relative;\n`;\n","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/actions/subredditAction.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/api.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/reducers/index.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/reducers/subredditReducer.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/components/subredditList.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/components/chosenPosts.js",["100","101","102"],"import React from \"react\";\n//redux\nimport { useSelector } from \"react-redux\";\nimport { loadChosenPosts } from \"../actions/chosenPostsAction\";\nimport { Posts } from \"./Posts\";\n\nconst SpecificPosts = () => {\n  return <div>Hello</div>;\n};\n\nexport default SpecificPosts;\n","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/actions/chosenPostsAction.js",["103"],"import axios from \"axios\";\nimport { chosenPostsUrl, commentPostUrl, searchPostUrl } from \"../api\";\n\nexport const loadChosenPosts = (option) => async (dispatch) => {\n  const chosenData = await axios.get(chosenPostsUrl(option));\n  dispatch({\n    type: \"FETCH_DATA_SPECIFIC_OPTION\",\n    payload: {\n      chosenPosts: chosenData.data.data.children,\n    },\n  });\n};\n\nexport const commentChosenPosts = (category, id) => async (dispatch) => {\n  const commentData = await axios.get(commentPostUrl(category, id));\n  dispatch({\n    type: \"FETCH_DATA_COMMENTS\",\n    payload: {\n      commentPosts: commentData.data.data,\n    },\n  });\n};\n\n\n","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/reducers/chosenPostsReducer.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/components/posts.js",["104","105"],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/components/Posts.js",["106","107","108","109","110"],"import React, { useState } from \"react\";\n//redux\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { commentChosenPosts } from \"../actions/commentAction\";\nimport { loadChosenPosts } from \"../actions/chosenPostsAction\";\nimport Comments from \"./Comments\";\nimport styled from \"styled-components\";\nimport { motion, AnimatePresence, AnimateSharedLayout } from \"framer-motion\";\n\nconst Posts = ({ title, ups, id, subreddit, thumb, author, unixTime }) => {\n  const dispatch = useDispatch();\n  const { commentPosts } = useSelector((state) => state.comments);\n\n  const loadCommentPostsHandler = () => {\n    dispatch(commentChosenPosts(subreddit, id));\n  };\n\n  const loadChosenPostsHandler = () => {\n    dispatch(loadChosenPosts(`/r/${subreddit}`));\n    dispatch({ type: \"CLEAR_INITIAL_POSTS\" }); //CLEARS INITIAL POSTS\n  };\n\n  let imgSource;\n  if (thumb.startsWith(\"http\")) {\n    imgSource = <img src={thumb} alt={id} />;\n  } else {\n    imgSource = \"\";\n  }\n\n  let date = new Date(unixTime * 1000).toLocaleDateString(\"en-us\");\n\n  return (\n    <PostStyle>\n      <TopBar>\n        <div>{ups}</div>\n        <CategoryOnPost onClick={loadChosenPostsHandler}>\n          /r/{subreddit}\n        </CategoryOnPost>\n        <div>/u/{author}</div>\n        <div>{`${date}`}</div>\n      </TopBar>\n      <Break></Break>\n      <TitleImg>\n        {imgSource}\n        <h3 onClick={loadCommentPostsHandler}>{title}</h3>\n      </TitleImg>\n    </PostStyle>\n  );\n};\n\nexport default Posts;\n\nconst PostStyle = styled(motion.div)`\n  display: flex;\n  padding: 0.5rem 0.5rem;\n  flex-wrap: wrap;\n  border-left: 3px red solid;\n  margin: 1rem 0;\n`;\n\nconst TopBar = styled(motion.div)`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  flex-grow: 1;\n  font-size: 1rem;\n  color: gray;\n`;\n\nconst TitleImg = styled(motion.div)`\n  display: flex;\n  flex-direction: row;\n  flex-grow: 1;\n  cursor: pointer;\n  img {\n    float: left;\n    display: block;\n    padding: 1rem 1rem;\n  }\n  h3 {\n    width: 100%;\n  }\n`;\n\nconst Break = styled(motion.div)`\n  height: 0;\n  flex-basis: 100%;\n`;\n\nconst CategoryOnPost = styled(motion.div)`\n  cursor: pointer;\n`;\n","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/reducers/commentReducer.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/actions/commentAction.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/components/Comments.js",["111"],"import React from \"react\";\n//redux\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loadSubreddit } from \"../actions/subredditAction\";\nimport styled from \"styled-components\";\nimport { motion } from \"framer-motion\";\n\nconst Comments = () => {\n  const { commentPosts, mainPost } = useSelector((state) => state.comments);\n  const dispatch = useDispatch();\n  const clearCommentsHandler = () => {\n    dispatch({ type: \"CLEAR_COMMENTS\" }); //CLEARS INITIAL POSTS\n    document.body.style.overflow = \"auto\";\n  };\n\n  const toUsefulDate = (utcTime) => {\n    let date = new Date(utcTime * 1000).toLocaleDateString(\"en-us\");\n    return date;\n  };\n\n  let imgSource;\n  if (mainPost.thumbnail.startsWith(\"http\") && mainPost.post_hint === \"image\") {\n    imgSource = <img src={mainPost.url} alt={mainPost.id} />;\n  } else if (\n    mainPost.thumbnail.startsWith(\"http\") &&\n    mainPost.post_hint === \"link\"\n  ) {\n    imgSource = (\n      <img\n        src={mainPost.thumbnail}\n        alt={mainPost.id}\n        width=\"100px\"\n        className=\"linkThumb\"\n      />\n    );\n  } else {\n    imgSource = \"\";\n  }\n\n  document.body.style.overflow = \"hidden\";\n\n  return (\n    <CommentBox>\n      <Detail>\n        <MainPostStyle>\n          <button onClick={clearCommentsHandler}>X</button>\n          <TopBar>\n            <div>{mainPost.ups}</div>\n            <div>{mainPost.subreddit_name_prefixed}</div>\n            <div>/u/{mainPost.author}</div>\n            <div>{toUsefulDate(`${mainPost.created}`)}</div>\n          </TopBar>\n          <PostStyle>\n            <h3>{mainPost.title}</h3>\n            {imgSource}\n          </PostStyle>\n        </MainPostStyle>\n        {commentPosts.map((comment) => (\n          <CommentsStyle>\n            <TopBarComment>\n              <span>{comment.data.ups}</span>\n              <span>/u/{comment.data.author}</span>\n              <span>{toUsefulDate(`${comment.data.created}`)}</span>\n            </TopBarComment>\n            <p>{comment.data.body}</p>\n          </CommentsStyle>\n        ))}\n      </Detail>\n    </CommentBox>\n  );\n};\n\nexport default Comments;\n\nconst MainPostStyle = styled(motion.div)`\n  display: flex;\n  padding: 0.5rem 0.5rem;\n  flex-wrap: wrap;\n  border-left: red 3px solid;\n  margin: 1rem 0;\n`;\n\nconst PostStyle = styled(motion.div)`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 0rem 1rem;\n  align-content: center;\n  width: 100%;\n`;\n\nconst CommentBox = styled(motion.div)`\n  width: 100%;\n  min-height: 100vh;\n  overflow-y: scroll;\n  background: rgba(0, 0, 0, 0.5);\n  position: fixed;\n  top: 0;\n  left: 0;\n  &::-webkit-scrollbar {\n    width: 0.5rem;\n  }\n  &::-webkit-scrollbar-thumb {\n    background-color: white;\n  }\n  &::-webkit-scrollbar-track {\n    background-color: red;\n  }\n  z-index: 5;\n`;\n\nconst TopBar = styled(motion.div)`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  flex-grow: 1;\n  font-size: 1rem;\n  color: gray;\n`;\n\nconst TopBarComment = styled(motion.div)`\n  display: flex;\n  justify-content: flex-start;\n  flex-direction: row;\n  flex-grow: 1;\n  font-size: 0.85rem;\n  color: gray;\n  span {\n    padding-right: 2rem;\n  }\n`;\n\nconst Detail = styled(motion.div)`\n  width: 80%;\n  border-radius: 1rem;\n  padding: 2rem 5rem;\n  background: white;\n  position: absolute;\n  left: 10%;\n  color: black;\n  img {\n    width: 100%;\n  }\n  z-index: 10;\n  h3 {\n    background: white;\n    color: black;\n  }\n  button {\n    font-size: 1.5rem;\n    border: none;\n    padding: 0.5rem 0.5rem;\n    cursor: pointer;\n    background: red;\n    color: white;\n    position: absolute;\n    right: 0;\n    top: 0;\n  }\n`;\n\nconst CommentsStyle = styled(motion.div)`\n  padding: 1rem 1rem;\n  border-left: red 1px solid;\n  margin: 1rem 0;\n  p {\n    color: black;\n    font-size: 1rem;\n  }\n`;\n","/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/components/GlobalStyles.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/components/Nav.js",["112"],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/actions/searchPostsAction.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/reddit_portfolio_project/src/reducers/searchPostsReducer.js",[],{"ruleId":"113","severity":1,"message":"114","line":16,"column":10,"nodeType":"115","messageId":"116","endLine":16,"endColumn":23},{"ruleId":"113","severity":1,"message":"117","line":4,"column":17,"nodeType":"115","messageId":"116","endLine":4,"endColumn":26},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"113","severity":1,"message":"122","line":8,"column":8,"nodeType":"115","messageId":"116","endLine":8,"endColumn":21},{"ruleId":"113","severity":1,"message":"123","line":24,"column":25,"nodeType":"115","messageId":"116","endLine":24,"endColumn":33},{"ruleId":"113","severity":1,"message":"124","line":124,"column":7,"nodeType":"115","messageId":"116","endLine":124,"endColumn":19},{"ruleId":"113","severity":1,"message":"125","line":3,"column":10,"nodeType":"115","messageId":"116","endLine":3,"endColumn":21},{"ruleId":"113","severity":1,"message":"126","line":4,"column":10,"nodeType":"115","messageId":"116","endLine":4,"endColumn":25},{"ruleId":"113","severity":1,"message":"127","line":5,"column":10,"nodeType":"115","messageId":"116","endLine":5,"endColumn":15},{"ruleId":"113","severity":1,"message":"128","line":2,"column":42,"nodeType":"115","messageId":"116","endLine":2,"endColumn":55},{"ruleId":"113","severity":1,"message":"129","line":3,"column":10,"nodeType":"115","messageId":"116","endLine":3,"endColumn":21},{"ruleId":"113","severity":1,"message":"130","line":4,"column":10,"nodeType":"115","messageId":"116","endLine":4,"endColumn":23},{"ruleId":"113","severity":1,"message":"131","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":25},{"ruleId":"113","severity":1,"message":"132","line":6,"column":8,"nodeType":"115","messageId":"116","endLine":6,"endColumn":16},{"ruleId":"113","severity":1,"message":"133","line":8,"column":18,"nodeType":"115","messageId":"116","endLine":8,"endColumn":33},{"ruleId":"113","severity":1,"message":"134","line":8,"column":35,"nodeType":"115","messageId":"116","endLine":8,"endColumn":54},{"ruleId":"113","severity":1,"message":"135","line":12,"column":11,"nodeType":"115","messageId":"116","endLine":12,"endColumn":23},{"ruleId":"113","severity":1,"message":"130","line":4,"column":10,"nodeType":"115","messageId":"116","endLine":4,"endColumn":23},{"ruleId":"113","severity":1,"message":"136","line":5,"column":8,"nodeType":"115","messageId":"116","endLine":5,"endColumn":14},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-native-reassign",["137"],"no-negated-in-lhs",["138"],"'SpecificPosts' is defined but never used.","'mainPost' is assigned a value but never used.","'CommentsList' is assigned a value but never used.","'useSelector' is defined but never used.","'loadChosenPosts' is defined but never used.","'Posts' is defined but never used.","'searchPostUrl' is defined but never used.","'useDispatch' is defined but never used.","'loadSubreddit' is defined but never used.","'useState' is defined but never used.","'Comments' is defined but never used.","'AnimatePresence' is defined but never used.","'AnimateSharedLayout' is defined but never used.","'commentPosts' is assigned a value but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]